# Creates a new production release and publishes it to npm.

# The release will be marked as 'latest release'
# on GitHub and carry the 'latest' tag on npm.

name: Create and publish production release

on:
  workflow_dispatch:

jobs:
  create-release:
    name: Create production release
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{secrets.GH_CLI_TOKEN}}
        # 1) If the release already exists as a draft, it means that we
        # published the package as a beta release before. Because the intent
        # of this workflow is to publish a production release, we will remove
        # the --prelease flag and mark it as latest release.
        #
        # 2) If the release doesn't exist yet, we will simply create a new
        # production release. Reason: We might not want to create a draft
        # release for every single version, for example when we just publish
        # hotfixes.
        run: |
          version=$(jq -r .version package.json)
          echo "The production release version will be: $version"
          tag="v${version}"
          draft_exists=$(gh release view "$tag" --json isPrerelease --jq ".isPrerelease" 2>/dev/null)

          if "$draft_exists" ; then
            gh release edit "$tag" --prerelease=false --latest
          else
            gh release create "$tag" --title "$tag" --latest
          fi

      - name: Check if (beta) version exists on npm
        id: check-beta
        run: |
          version=$(jq -r .version package.json)
          npm_version=$(npm view .@"$version" version 2> /dev/null)
          echo "npm_version=$npm_version" >> "$GITHUB_OUTPUT"

      - name: Publish to npm
        if: ${{ ! steps.check-beta.outputs.npm_version }}
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}
        # The prepublishOnly script lints and builds the project (see package.json)
        run: |
          npm ci
          npm publish

      - name: Tag existing version with 'latest'
        if: ${{ steps.check-beta.outputs.npm_version }}
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}
        run: |
          npm dist-tag add homebridge-panasonic-ac-platform@${{ steps.check-beta.outputs.npm_version }} latest
          npm dist-tag rm homebridge-panasonic-ac-platform@${{ steps.check-beta.outputs.npm_version }} beta
